// Generated by CoffeeScript 1.3.1
var create_cell, display_stack, parable_append_symbol, parable_clear_log, parable_collect_garbage, parable_compile_and_run, parable_display_symbols, parable_empty_stack, parable_update_log, parable_update_stats;

create_cell = function(max, index, type, value) {
  var extra;
  index = index + 1;
  extra = "";
  if (type === 'string') {
    extra = "<br>Stored in &amp;" + stack[index - 1];
  }
  if (type === 'pointer') {
    if (pointer_to_name(parseInt(value.substr(5))) !== "") {
      extra = "<br>Pointer to <em>" + (pointer_to_name(parseInt(value.substr(5)))) + "</em>";
    }
  }
  if (index === max) {
    return "<td>" + value + "<hr>Type: " + type + "<br>Item " + index + " of " + max + extra + "<br>(<b>Top Of Stack</b>)</td>";
  } else {
    return "<td>" + value + "<hr>Type: " + type + "<br>Item " + index + " of " + max + extra + "</td>";
  }
};

display_stack = function() {
  var i, s;
  s = "<table class='table table-condensed table-bordered'><tr>";
  if (sp <= 0) {
    document.getElementById('stack').innerHTML = "<b>empty stack</b>";
    return;
  }
  i = sp;
  while (i > 0) {
    i = i - 1;
    if (types[i] === TYPE_STRING) {
      s = s + create_cell(sp, i, 'string', "'" + slice_to_string(stack[i]) + "'");
    } else if (types[i] === TYPE_CHARACTER) {
      s = s + create_cell(sp, i, 'character', '$' + String.fromCharCode(stack[i]));
    } else if (types[i] === TYPE_FLAG) {
      if (stack[i] === -1) {
        s = s + create_cell(sp, i, 'flag', 'true');
      } else if (stack[i] === 0) {
        s = s + create_cell(sp, i, 'flag', 'false');
      } else {
        s = s + create_cell(sp, i, 'flag', 'malformed flag');
      }
    } else if (types[i] === TYPE_NUMBER) {
      s = s + create_cell(sp, i, 'number', '#' + stack[i]);
    } else if (types[i] === TYPE_FUNCTION) {
      s = s + create_cell(sp, i, 'pointer', '&amp;' + stack[i]);
    } else {
      s = s + "<td>Unknown data type for value " + stack[i] + ("<hr>" + i + "</td>");
    }
  }
  s = s + "</tr></table>";
  document.getElementById('stack').innerHTML = s;
  return s;
};

parable_compile_and_run = function() {
  var code;
  code = document.getElementById('code').value;
  code = code + "\n";
  compile_source(code.split("\n"));
  display_stack();
  parable_display_symbols();
  parable_update_log();
  parable_update_stats();
  return 0;
};

parable_empty_stack = function() {
  sp = 0;
  display_stack();
  parable_update_stats();
  return 0;
};

parable_append_symbol = function(txt) {
  var code, original;
  code = document.getElementById("code");
  original = code.value;
  code.value = "" + original + " " + txt + " ";
  return 0;
};

parable_display_symbols = function() {
  var i, s, _i, _len;
  s = "<table class='table table-condensed table-bordered'><tr>";
  for (_i = 0, _len = dictionary_names.length; _i < _len; _i++) {
    i = dictionary_names[_i];
    s = s + ("<td><a onClick='parable_append_symbol(\"" + i + "\");'>" + i + "</a><br>");
    s = s + ("Stored in slice &amp;" + (lookup_pointer(i)) + "</td>");
  }
  s = s + "</tr></table>";
  document.getElementById('symbols').innerHTML = s;
  return 0;
};

parable_clear_log = function() {
  log = [];
  return document.getElementById('log').innerHTML = '<b>nothing to report</b>';
};

parable_update_log = function() {
  var i, s, _i, _len;
  if (log.length === 0) {
    return document.getElementById('log').innerHTML = '<b>nothing to report</b>';
  } else {
    s = "<table class='table table-condensed table-bordered'><tr>";
    for (_i = 0, _len = log.length; _i < _len; _i++) {
      i = log[_i];
      s = s + ("<td>" + i + "</td>");
    }
    s = s + "</tr></table>";
    return document.getElementById('log').innerHTML = s;
  }
};

parable_update_stats = function() {
  var i, s, used;
  s = "";
  used = 0;
  i = 0;
  while (i < MAX_SLICES) {
    if (p_map[i] !== 0) {
      used++;
    }
    i++;
  }
  s = s + ("<p>Used " + used + " of " + MAX_SLICES + " slices.<p>");
  s = s + ("<p>Current stack depth: " + sp + ".</p>");
  s = s + "<hr>";
  s = s + "<div class='btn-group'>";
  s = s + "<button class='btn btn-default' onClick='parable_collect_garbage();'>Collect Garbage</button>";
  s = s + "<button class='btn btn-default' onClick='parable_clear_log();'>Clear Logs</button>";
  s = s + "<button class='btn btn-default' onClick='parable_empty_stack();'>Clear Stack</button>";
  s = s + "</div>";
  document.getElementById('stats').innerHTML = s;
  return s;
};

parable_collect_garbage = function() {
  if (sp === 0) {
    collect_unused_slices();
    return parable_update_stats();
  } else {
    log.push('Error: stack must be cleared before garbage collection');
    return parable_update_log();
  }
};
